version: '3.8'

services:  
  postgres: 
    image: postgres:16.0-alpine3.18
    ports: 
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres  #sempre in /run/secrets/ 
      - POSTGRES_PASSWORD_FILE=/run/secrets/pg-password 
    secrets:
      - pg-password
    networks:
      - network2
    volumes:
      - volume_postgres:/var/lib/postgresql/data
    configs:
      - source: myconf2
        target: /docker-entrypoint-initdb.d/initdb.sql
    deploy:
      replicas: 1


  pgadmin:
    image: dpage/pgadmin4:7.8
    labels: 
      - customers=311Verona
    environment:
      - PGADMIN_DEFAULT_EMAIL=pippo@example.com
      - PGADMIN_DEFAULT_PASSWORD=/run/secrets/pgadmin-pwd
      - PGADMIN_LISTEN_PORT=8080
    ports:
      - 8080:8080
    secrets:
       - pgadmin-pwd
    volumes:
      - volume_pgadmin:/var/lib/pgadmin
    networks:
      - network2
    depends_on: 
      - postgres 
    deploy:
      replicas: 1
  

  postgrest:
    image: bitnami/postgrest:11.2.2
    environment:
      - PGRST_DB_URI=/run/secrets/pgrst-uri 
      - PGRST_DB_SCHEMAS=api 
      - PGRST_ANON_ROLE=web_anon 
    ports:
      - 3000:3000
    secrets:
      - pgrst-uri
    depends_on:
      - postgres
    networks:
      - network2
    volumes:
      - pgt-volume:/var/lib/postgrest/data
    deploy:
      replicas: 1 

   


networks:
  network2:
volumes:
  volume_postgres:
  volume_pgadmin:
  pgt-volume:
secrets:
  pg-password:
    external: true 
  pgrst-uri:
    external: true 
  pgadmin-pwd:
    external: true 
configs:
  myconf2:
    file: ./initdb/todo.sql



# attenzione ai volumi 
# variabili vengono inizializzate solo quando creiamo lo stack 
# esiste la config , che prende un file e fa lo sharing dentro ad uno o pi√π container 